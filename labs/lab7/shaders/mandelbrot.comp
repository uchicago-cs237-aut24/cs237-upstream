/*! \file mandelbrot.comp
 *
 * Lab 7 sample code: compute shader for rendering the computed image
 *
 * \author John Reppy
 */

/* CMSC23740 Sample code
 *
 * COPYRIGHT (c) 2024 John Reppy (https://cs.uchicago.edu/~jhr)
 * All rights reserved.
 */

#version 460

// local grid is 16*16.
layout (local_size_x = 16, local_size_y = 16) in;

const int kMaxIter = 1024;

layout (set = 0, binding = 0) uniform CompUB {
    vec2 center;        ///< center point of image
    vec2 fov;           ///< field of view
    vec2 size;          ///< global compute-grid size; should be a multiple
                        ///  of the local grid size.
    vec3 color[1024];   ///< colors for computed image (indexed by iteration count)
} ubo;

layout (push_constant) uniform CompPC {
    int iter;
} pc;

/// state.xy is the current "z" value and state.z is the iteration count.
/// It will be the case that `state.z == pc.iter` when the item has not
/// yet diverged and `state.z < pc.iter` when it diverged on a previous
/// iteration.
//
layout (set = 1, binding = 0, rgba32f) uniform readonly image2D stateIn;
layout (set = 1, binding = 1, rgba32f) uniform writeonly image2D stateOut;

/// the compute image
layout (set = 1, binding = 2, rgba8) uniform writeonly image2D imageOut;

void main ()
{
    ivec2 ix = ivec2(gl_GlobalInvocationID.xy);

    // compute the value of "c" from the invocation ID
    vec2 t = vec2(ix) / vec2(ubo.size);
    vec2 c = mix(ubo.center - ubo.fov, ubo.center + ubo.fov, t);
    vec2 z;
    int count;

    if (pc.iter <= 0) {
        // initialization pass
        count = 1;
        imageStore(stateOut, ix, vec4(c, count, 0));
    }
    else if (pc.iter < kMaxIter) {
        // iteration step
        vec3 state = imageLoad(stateIn, ix).xyz;
        vec2 z = state.xy;
        count = int(state.z);
        if (pc.iter == count) {
            if (dot(z, z) <= 4.0) {
                count = count + 1;
                z = vec2(z.x * z.x - z.y * z.y + c.x, 2.0 * z.x * z.y + c.y);
            }
        }
        // store the resulting state
        imageStore(stateOut, ix, vec4(z, count, 0));
    }
    else {
        // termination pass
        vec4 state = imageLoad(stateIn, ix);
        count = int(state.z);
    }

    // write the color to the output image; we use black for when the element
    // has not yet diverged
    if (pc.iter < kMaxIter) {
        if (count < pc.iter) {
            imageStore(imageOut, ix, vec4(ubo.color[count], 1));
        } else {
            imageStore(imageOut, ix, vec4(0,0,0,1));
        }
    }

}
